{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AAGnC,MAAM,UAAU,eAAe,CAAC,IAAY;IAC1C,OAAO,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5C,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,IAAgB;IAC5C,OAAO,IAAI,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC;AACjD,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,wBAAwB,CACtC,OAAY,EACZ,YAA+B;IAE/B,OAAQ,KAAM,SAAQ,OAAO;QAC3B,IAAI,aAAa;YACf,OAAO,YAAY,CAAC;QACtB,CAAC;KAC4B,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,mBAAmB,CACjC,OAAwB,EACxB,OAAe;IAEf,MAAM,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CACjC,QAAQ,CAAC,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,OAAO,CACtD,CAAC;IAEF,IAAI,CAAC,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,+BAA+B,OAAO,EAAE,CAAC,CAAC;IAErE,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC;AAED,MAAM,UAAU,sBAAsB,CACpC,YAA+B,EAC/B,eAAoC;IAEpC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC;QAAE,OAAO,KAAK,CAAC;IAExD,KAAK,MAAM,OAAO,IAAI,eAAe,EAAE;QACrC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAc,CAAC;YAAE,OAAO,KAAK,CAAC;KACnE;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,MAAc;IAC9C,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC;IACvC,MAAM,KAAK,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC;IACrC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AACvB,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,SAAoB;IACpD,OAAO,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;AAC/D,CAAC;AAED,MAAM,UAAU,GAAG;IACjB,OAAO,iBAAiB,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;AACvC,CAAC","sourcesContent":["import { ApolloClient, DocumentNode } from '@apollo/client/core';\nimport { AppInfoResponse, CellId } from '@holochain/conductor-api';\nimport { Base64 } from 'js-base64';\nimport { Timestamp } from './core-types/timestamp';\n\nexport function deserializeHash(hash: string): Uint8Array {\n  return Base64.toUint8Array(hash.slice(1));\n}\n\nexport function serializeHash(hash: Uint8Array): string {\n  return `u${Base64.fromUint8Array(hash, true)}`;\n}\n\n/**\n * Setups the given element with the ApolloClient dependency\n * The result is ready to call customElements.define()\n */\nexport function setupApolloClientElement(\n  element: any,\n  apolloClient: ApolloClient<any>\n): typeof HTMLElement {\n  return (class extends element {\n    get _apolloClient() {\n      return apolloClient;\n    }\n  } as any) as typeof HTMLElement;\n}\n\nexport function getCellIdForDnaHash(\n  appInfo: AppInfoResponse,\n  dnaHash: string\n): CellId {\n  const cell = appInfo.cell_data.find(\n    cellData => serializeHash(cellData[0][0]) === dnaHash\n  );\n\n  if (!cell) throw new Error(`Could not find cell for dna ${dnaHash}`);\n\n  return cell[0];\n}\n\nexport function clientIncludesTypeDefs(\n  apolloClient: ApolloClient<any>,\n  typeDefsToCheck: Array<DocumentNode>\n): boolean {\n  if (!Array.isArray(apolloClient.typeDefs)) return false;\n\n  for (const typeDef of typeDefsToCheck) {\n    if (!apolloClient.typeDefs.includes(typeDef as any)) return false;\n  }\n  return true;\n}\n\nexport function millisToTimestamp(millis: number): Timestamp {\n  const secs = Math.floor(millis / 1000);\n  const nanos = (millis % 1000) * 1000;\n  return [secs, nanos];\n}\n\nexport function timestampToMillis(timestamp: Timestamp): number {\n  return timestamp[0] * 1000 + Math.floor(timestamp[1] / 1000);\n}\n\nexport function now(): Timestamp {\n  return millisToTimestamp(Date.now());\n}\n"]}