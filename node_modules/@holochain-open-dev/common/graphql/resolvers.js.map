{"version":3,"file":"resolvers.js","sourceRoot":"","sources":["../../src/graphql/resolvers.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,mBAAmB,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AAC9D,OAAO,KAAK,OAAO,MAAM,kBAAkB,CAAC;AAE5C,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,YAA0B,EAC1B,cAA8B,EAC9B,QAAQ,GAAG,QAAQ;IAEnB,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC;QACzC,gBAAgB,EAAE,cAAc;KACjC,CAAC,CAAC;IACH,KAAK,UAAU,QAAQ,CAAC,OAAe,EAAE,OAAe,EAAE,OAAY;QACpE,MAAM,MAAM,GAAG,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACrD,OAAO,YAAY,CAAC,QAAQ,CAAC;YAC3B,GAAG,EAAE,IAAW;YAChB,OAAO,EAAE,MAAM;YACf,SAAS,EAAE,QAAQ;YACnB,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;SACtB,CAAC,CAAC;IACL,CAAC;IACD,OAAO;QACL,KAAK,EAAE;YACL,KAAK,CAAC,EAAE;gBACN,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC;oBACzC,gBAAgB,EAAE,cAAc;iBACjC,CAAC,CAAC;gBAEH,oEAAoE;gBACpE,MAAM,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEjD,OAAO;oBACL,EAAE,EAAE,aAAa,CAAC,aAAa,CAAC;iBACjC,CAAC;YACJ,CAAC;YACD,QAAQ,CAAC,CAAC,EAAE,EAAE,UAAU,EAAE;gBACxB,OAAO;oBACL,EAAE,EAAE,UAAU;iBACf,CAAC;YACJ,CAAC;SACF;QACD,cAAc,EAAE;YACd,KAAK,CAAC,GAAG,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE;gBACnC,MAAM,YAAY,GAAG,MAAM,QAAQ,CACjC,cAAc,CAAC,EAAE,EACjB,mBAAmB,EACnB,OAAO,CACR,CAAC;gBAEF,IAAI,CAAC,YAAY;oBACf,MAAM,IAAI,KAAK,CAAC,iBAAiB,OAAO,YAAY,CAAC,CAAC;gBACxD,MAAM,KAAK,GAAQ,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAE5D,OAAO;oBACL,EAAE,EAAE,OAAO;oBACX,GAAG,KAAK;oBACR,QAAQ,EAAE;wBACR,QAAQ,EAAE;4BACR,EAAE,EAAE,cAAc,CAAC,EAAE;yBACtB;wBACD,OAAO,EAAE,YAAY,CAAC,OAAO;qBAC9B;iBACF,CAAC;YACJ,CAAC;SACF;KACF,CAAC;AACJ,CAAC","sourcesContent":["import { Resolvers } from '@apollo/client/core';\nimport { AppWebsocket, InstalledAppId } from '@holochain/conductor-api';\nimport { getCellIdForDnaHash, serializeHash } from '../utils';\nimport * as msgpack from '@msgpack/msgpack';\n\nexport async function commonResolvers(\n  appWebsocket: AppWebsocket,\n  installedAppId: InstalledAppId,\n  zomeName = 'common'\n): Promise<Resolvers> {\n  const appInfo = await appWebsocket.appInfo({\n    installed_app_id: installedAppId,\n  });\n  async function callZome(dnaHash: string, fn_name: string, payload: any) {\n    const cellId = getCellIdForDnaHash(appInfo, dnaHash);\n    return appWebsocket.callZome({\n      cap: null as any,\n      cell_id: cellId,\n      zome_name: zomeName,\n      fn_name: fn_name,\n      payload: payload,\n      provenance: cellId[1],\n    });\n  }\n  return {\n    Query: {\n      async me() {\n        const appInfo = await appWebsocket.appInfo({\n          installed_app_id: installedAppId,\n        });\n\n        // We can assume this because in a happ all public keys are the same\n        const myAgentPubKey = appInfo.cell_data[0][0][1];\n\n        return {\n          id: serializeHash(myAgentPubKey),\n        };\n      },\n      membrane(_, { membraneId }) {\n        return {\n          id: membraneId,\n        };\n      },\n    },\n    CommonMembrane: {\n      async get(commonMembrane, { entryId }) {\n        const entryDetails = await callZome(\n          commonMembrane.id,\n          'get_entry_details',\n          entryId\n        );\n\n        if (!entryDetails)\n          throw new Error(`Entry with ID ${entryId} not found`);\n        const entry: any = msgpack.decode(entryDetails.entry.entry);\n\n        return {\n          id: entryId,\n          ...entry,\n          _details: {\n            membrane: {\n              id: commonMembrane.id,\n            },\n            headers: entryDetails.headers,\n          },\n        };\n      },\n    },\n  };\n}\n"]}