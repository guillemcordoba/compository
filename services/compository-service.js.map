{"version":3,"file":"compository-service.js","sourceRoot":"","sources":["../../src/services/compository-service.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,OAAO,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAE,kBAAkB,EAAE,MAAM,kCAAkC,CAAC;AAStE,MAAM,OAAO,kBAAmB,SAAQ,kBAAkB;IACxD,YACY,YAA0B,EAC1B,iBAAyB;QAEnC,KAAK,CAAC,YAAY,EAAE,iBAAiB,EAAE,cAAc,CAAC,CAAC;QAH7C,iBAAY,GAAZ,YAAY,CAAc;QAC1B,sBAAiB,GAAjB,iBAAiB,CAAQ;IAGrC,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,OAAe;QACrC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAChC,aAAa,EACb,sBAAsB,EACtB,OAAO,CACR,CAAC;QACF,MAAM,CAAC,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACtD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,WAAmB;QAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC;IACnE,CAAC;IAEO,QAAQ,CAAC,IAAY,EAAE,MAAc,EAAE,OAAY;QACzD,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;YAChC,GAAG,EAAE,IAAI;YACT,OAAO,EAAE,IAAI,CAAC,iBAAiB;YAC/B,OAAO,EAAE,MAAM;YACf,OAAO,EAAE,OAAO;YAChB,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACrC,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { AppWebsocket, CellId } from '@holochain/conductor-api';\nimport * as msgpack from '@msgpack/msgpack';\nimport { FileStorageService } from '@holochain-open-dev/file-storage';\nimport { DnaTemplate, ZomeDef } from '../types/dnas';\n\nexport interface GetTemplateForDnaOutput {\n  dnaTemplate: DnaTemplate;\n  properties: any;\n  uuid: string;\n}\n\nexport class CompositoryService extends FileStorageService {\n  constructor(\n    protected appWebsocket: AppWebsocket,\n    protected compositoryCellId: CellId\n  ) {\n    super(appWebsocket, compositoryCellId, 'file_storage');\n  }\n\n  async getTemplateForDna(dnaHash: string): Promise<GetTemplateForDnaOutput> {\n    const result = await this.callZome(\n      'compository',\n      'get_template_for_dna',\n      dnaHash\n    );\n    result.properties = msgpack.decode(result.properties);\n    return result;\n  }\n\n  async getZomeDef(zomeDefHash: string): Promise<ZomeDef> {\n    return this.callZome('compository', 'get_zome_def', zomeDefHash);\n  }\n\n  private callZome(zome: string, fnName: string, payload: any) {\n    return this.appWebsocket.callZome({\n      cap: null,\n      cell_id: this.compositoryCellId,\n      fn_name: fnName,\n      payload: payload,\n      provenance: this.compositoryCellId[1],\n      zome_name: zome,\n    });\n  }\n}\n"]}