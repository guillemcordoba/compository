{"version":3,"file":"compository-discover-entry.js","sourceRoot":"","sources":["../../src/elements/compository-discover-entry.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAChE,OAAO,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;AAE7D,OAAO,EAAE,qBAAqB,EAAE,MAAM,8BAA8B,CAAC;AACrE,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAC7D,OAAO,EAAE,kBAAkB,EAAE,MAAM,iCAAiC,CAAC;AAErE,MAAM,OAAO,wBAAyB,SAAQ,eAAe,CAAC,UAAU,CAAC;IAAzE;;QAKE,aAAQ,GAAG,IAAI,CAAC;IA2ClB,CAAC;IAtCC,KAAK,CAAC,YAAY;QAChB,MAAM,kBAAkB,GAAG,IAAI,kBAAkB,CAC/C,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,MAAM,CACZ,CAAC;QACF,MAAM,EACJ,MAAM,EACN,SAAS,EACT,aAAa,EACb,SAAS,GACV,GAAG,MAAM,oBAAoB,CAC5B,IAAI,CAAC,cAAc,EACnB,kBAAkB,EAClB,IAAI,CAAC,QAAQ,CACd,CAAC;QAEF,MAAM,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,MAAM,qBAAqB,CACpD,kBAAkB,EAClB,MAAM,EACN,SAAS,CACV,CAAC;QAEF,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QACjD,SAAS,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,MAAM,CACxC,IAAI,CAAC,MAAM,CAAC,UAAkB,CAAC,cAAqB,EACrD,IAAI,CAAC,MAAM,CAAC,UAAwB,EACpC,SAAS,CACV,CAAC;QAEF,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA,GAAG,IAAI,CAAC,QAAQ;YACvB,CAAC,CAAC,IAAI,CAAA,iDAAiD;YACvD,CAAC,CAAC,IAAI,CAAA,EAAE;2DAC2C,CAAC;IAC1D,CAAC;CACF;AA9CC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;0DACT;AAGlB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;0DACZ;AAGhB;IADC,KAAK,CAAC,QAAQ,CAAC;wDACU","sourcesContent":["import { html, LitElement, property, query } from 'lit-element';\nimport { discoverEntryDetails } from '../processes/discover';\nimport { CompositoryScope } from './compository-scope';\nimport { fetchRenderersForZome } from '../processes/fetch-renderers';\nimport { membraneContext } from 'holochain-membrane-context';\nimport { CompositoryService } from '../services/compository-service';\n\nexport class CompositoryDiscoverEntry extends membraneContext(LitElement) {\n  @property({ type: String })\n  entryUri!: string;\n\n  @property({ type: Boolean })\n  _loading = true;\n\n  @query('#scope')\n  _scope!: CompositoryScope;\n\n  async firstUpdated() {\n    const compositoryService = new CompositoryService(\n      this.appWebsocket,\n      this.cellId\n    );\n    const {\n      cellId,\n      zomeIndex,\n      entryDefIndex,\n      entryHash,\n    } = await discoverEntryDetails(\n      this.adminWebsocket,\n      compositoryService,\n      this.entryUri\n    );\n\n    const { renderers, def } = await fetchRenderersForZome(\n      compositoryService,\n      cellId,\n      zomeIndex\n    );\n\n    const entryIdStr = def.entry_defs[entryDefIndex];\n    renderers.entryRenderers[entryIdStr].render(\n      (this._scope.shadowRoot as any).customElements as any,\n      this._scope.shadowRoot as ShadowRoot,\n      entryHash\n    );\n\n    this._loading = false;\n  }\n\n  render() {\n    return html`${this._loading\n        ? html`<mwc-circular-progress></mwc-circular-progress>`\n        : html``}\n      <compository-scope id=\"scope\"> </compository-scope> `;\n  }\n}\n"]}