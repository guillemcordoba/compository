{"version":3,"file":"compository-service.js","sourceRoot":"","sources":["../../src/services/compository-service.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,kBAAkB,EAAE,MAAM,kCAAkC,CAAC;AAStE,MAAM,OAAO,kBAAmB,SAAQ,kBAAkB;IACxD,YACS,YAA0B,EACvB,iBAAyB;QAEnC,KAAK,CAAC,YAAY,EAAE,iBAAiB,EAAE,cAAc,CAAC,CAAC;QAHhD,iBAAY,GAAZ,YAAY,CAAc;QACvB,sBAAiB,GAAjB,iBAAiB,CAAQ;IAGrC,CAAC;IAED,cAAc;IAEd,KAAK,CAAC,iBAAiB,CAAC,OAAe;QACrC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAChC,aAAa,EACb,sBAAsB,EACtB,OAAO,CACR,CAAC;QACF,yDAAyD;QACzD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,WAAmB;QAClC,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC;IACnE,CAAC;IACD,KAAK,CAAC,cAAc,CAAC,eAAuB;QAC1C,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,kBAAkB,EAAE,eAAe,CAAC,CAAC;IAC3E,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,mBAAmB,EAAE,IAAI,CAAC,CAAC;IACjE,CAAC;IAED,eAAe;IAEf,KAAK,CAAC,kBAAkB,CAAC,WAAwB;QAC/C,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,sBAAsB,EAAE,WAAW,CAAC,CAAA;IAC1E,CAAC;IACD,KAAK,CAAC,sBAAsB,CAAC,KAAkC;QAC7D,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,0BAA0B,EAAE,KAAK,CAAC,CAAA;IACxE,CAAC;IAEO,QAAQ,CAAC,IAAY,EAAE,MAAc,EAAE,OAAY;QACzD,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;YAChC,GAAG,EAAE,IAAI;YACT,OAAO,EAAE,IAAI,CAAC,iBAAiB;YAC/B,OAAO,EAAE,MAAM;YACf,OAAO,EAAE,OAAO;YAChB,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACrC,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { AppWebsocket, CellId } from '@holochain/conductor-api';\nimport * as msgpack from '@msgpack/msgpack';\nimport { FileStorageService } from '@holochain-open-dev/file-storage';\nimport { DnaTemplate, Hashed, PublishInstantiatedDnaInput, ZomeDef } from '../types/dnas';\n\nexport interface GetTemplateForDnaOutput {\n  dnaTemplate: DnaTemplate;\n  properties: any;\n  uuid: string;\n}\n\nexport class CompositoryService extends FileStorageService {\n  constructor(\n    public appWebsocket: AppWebsocket,\n    protected compositoryCellId: CellId\n  ) {\n    super(appWebsocket, compositoryCellId, 'file_storage');\n  }\n\n  /** Getters */\n\n  async getTemplateForDna(dnaHash: string): Promise<GetTemplateForDnaOutput> {\n    const result = await this.callZome(\n      'compository',\n      'get_template_for_dna',\n      dnaHash\n    );\n    // result.properties = msgpack.decode(result.properties);\n    return result;\n  }\n\n  async getZomeDef(zomeDefHash: string): Promise<ZomeDef> {\n    return this.callZome('compository', 'get_zome_def', zomeDefHash);\n  }\n  async getDnaTemplate(dnaTemplateHash: string): Promise<DnaTemplate> {\n    return this.callZome('compository', 'get_dna_template', dnaTemplateHash);\n  }\n\n  async getAllZomeDefs(): Promise<Array<Hashed<ZomeDef>>> {\n    return this.callZome('compository', 'get_all_zome_defs', null);\n  }\n\n  /** Creators */\n\n  async publishDnaTemplate(dnaTemplate: DnaTemplate): Promise<string> {\n    return this.callZome('compository', 'publish_dna_template', dnaTemplate)\n  }\n  async publishInstantiatedDna(input: PublishInstantiatedDnaInput): Promise<string> {\n    return this.callZome('compository', 'publish_instantiated_dna', input)\n  }\n\n  private callZome(zome: string, fnName: string, payload: any) {\n    return this.appWebsocket.callZome({\n      cap: null,\n      cell_id: this.compositoryCellId,\n      fn_name: fnName,\n      payload: payload,\n      provenance: this.compositoryCellId[1],\n      zome_name: zome,\n    });\n  }\n}\n"]}