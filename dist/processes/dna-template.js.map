{"version":3,"file":"dna-template.js","sourceRoot":"","sources":["../../src/processes/dna-template.ts"],"names":[],"mappings":"AAGA,uDAAuD;AACvD,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,kBAAsC,EACtC,QAAgC;IAEhC,MAAM,iBAAiB,GAA4B,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QACtE,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,IAAI;QACtB,aAAa,EAAE,GAAG,CAAC,IAAI;KACxB,CAAC,CAAC,CAAC;IACJ,MAAM,WAAW,GAAgB;QAC/B,IAAI,EAAE,KAAK;QACX,SAAS,EAAE,iBAAiB;KAC7B,CAAC;IAEF,OAAO,kBAAkB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;AAC5D,CAAC","sourcesContent":["import { CompositoryService } from '../services/compository-service';\nimport { DnaTemplate, Hashed, ZomeDef, ZomeDefReference } from '../types/dnas';\n\n// For now, we assume that properties and uuid is empty\nexport async function createDnaTemplate(\n  compositoryService: CompositoryService,\n  zomeDefs: Array<Hashed<ZomeDef>>\n): Promise<string> {\n  const zomeDefReferences: Array<ZomeDefReference> = zomeDefs.map(def => ({\n    name: def.content.name,\n    zome_def_hash: def.hash,\n  }));\n  const dnaTemplate: DnaTemplate = {\n    name: 'adf',\n    zome_defs: zomeDefReferences,\n  };\n\n  return compositoryService.publishDnaTemplate(dnaTemplate);\n}\n"]}