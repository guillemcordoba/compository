{"version":3,"file":"discover.js","sourceRoot":"","sources":["../../src/processes/discover.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAsB,MAAM,4BAA4B,CAAC;AAC/E,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,oBAAoB,EAAE,MAAM,2BAA2B,CAAC;AAGjE,KAAK,UAAU,wBAAwB,CACrC,YAA0B,EAC1B,MAAc,EACd,SAAiB;IAEjB,MAAM,OAAO,GAAoC,MAAM,YAAY,CAAC,QAAQ,CAAC;QAC3E,GAAG,EAAE,IAAI;QACT,OAAO,EAAE,MAAM;QACf,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;QACrB,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,mBAAmB;QAC5B,OAAO,EAAE,SAAS;KACnB,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IAEzC,MAAM,MAAM,GAAG,MAAM,CAAC,OAAoC,CAAC;IAE3D,MAAM,YAAY,GAAI,MAAM,CAAC,UAE3B,CAAC,GAAG,CAAC;IAEP,OAAO;QACL,MAAM;QACN,SAAS,EAAE,YAAY,CAAC,OAAO;QAC/B,aAAa,EAAE,YAAY,CAAC,EAAE;QAC9B,SAAS;KACV,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACxC,cAA8B,EAC9B,kBAAsC,EACtC,QAAgB;IAEhB,yCAAyC;IACzC,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAEnD,iDAAiD;IACjD,MAAM,OAAO,GAAG,MAAM,cAAc,CAAC,WAAW,EAAE,CAAC;IACnD,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC;IAE1E,iDAAiD;IACjD,IAAI,CAAC,MAAM,EAAE;QACX,MAAM,GAAG,MAAM,UAAU,CAAC,cAAc,EAAE,kBAAkB,EAAE,OAAO,CAAC,CAAC;KACxE;IAED,oDAAoD;IACpD,OAAO,wBAAwB,CAC7B,kBAAkB,CAAC,YAAY,EAC/B,MAAM,EACN,SAAS,CACV,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,kBAAsC,EACtC,MAAc,EACd,SAAiB;IAEjB,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAEzC,MAAM,QAAQ,GAAG,MAAM,kBAAkB,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAErE,MAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC;IAE5E,sDAAsD;IACtD,MAAM,OAAO,GAAG,MAAM,kBAAkB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IAEjE,IAAI,CAAC,OAAO,CAAC,sBAAsB;QACjC,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;IAEtE,MAAM,IAAI,GAAG,MAAM,kBAAkB,CAAC,YAAY,CAChD,OAAO,CAAC,sBAAsB,CAC/B,CAAC;IAEF,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC,IAAI,CAAC,CAAC;IAChD,MAAM,SAAS,GAAG,MAAO,MAAM,CAAC,OAA0B,CACxD,kBAAkB,CAAC,YAAY,EAC/B,MAAM,CACP,CAAC;IACF,OAAO;QACL,SAAS;QACT,GAAG,EAAE,OAAO;KACb,CAAC;AACJ,CAAC","sourcesContent":["import { AdminWebsocket, AppWebsocket, CellId } from '@holochain/conductor-api';\nimport { CompositoryService } from '../services/compository-service';\nimport { serializeHash, HolochainCoreTypes } from '@holochain-open-dev/common';\nimport { installDna } from './install-dna';\nimport { ScopedRenderers, SetupRenderers } from '../types/scoped-renderers';\nimport { importModuleFromFile } from './import-module-from-file';\nimport { EntryDefLocator, ZomeDef } from '../types/dnas';\n\nasync function fetchZomeAndEntryIndexes(\n  appWebsocket: AppWebsocket,\n  cellId: CellId,\n  entryHash: string\n): Promise<EntryDefLocator> {\n  const details: HolochainCoreTypes.EntryDetails = await appWebsocket.callZome({\n    cap: null,\n    cell_id: cellId,\n    provenance: cellId[1],\n    zome_name: 'common',\n    fn_name: 'get_entry_details',\n    payload: entryHash,\n  });\n\n  const header = details.headers[0].header;\n\n  const create = header.content as HolochainCoreTypes.Create;\n\n  const appEntryType = (create.entry_type as {\n    App: HolochainCoreTypes.AppEntryType;\n  }).App;\n\n  return {\n    cellId,\n    zomeIndex: appEntryType.zome_id,\n    entryDefIndex: appEntryType.id,\n    entryHash,\n  };\n}\n\nexport async function discoverEntryDetails(\n  adminWebsocket: AdminWebsocket,\n  compositoryService: CompositoryService,\n  entryUri: string\n): Promise<EntryDefLocator> {\n  // For now only <DNA_HASH>://<ENTRY_HASH>\n  const [dnaHash, entryHash] = entryUri.split('://');\n\n  // Find the cellId corresponding to the given dna\n  const cellIds = await adminWebsocket.listCellIds();\n  let cellId = cellIds.find(cellId => serializeHash(cellId[0]) === dnaHash);\n\n  // If we don't have the dna installed, install it\n  if (!cellId) {\n    cellId = await installDna(adminWebsocket, compositoryService, dnaHash);\n  }\n\n  // Fetch information about the entry from its header\n  return fetchZomeAndEntryIndexes(\n    compositoryService.appWebsocket,\n    cellId,\n    entryHash\n  );\n}\n\nexport async function discoverRenderers(\n  compositoryService: CompositoryService,\n  cellId: CellId,\n  zomeIndex: number\n): Promise<{ renderers: ScopedRenderers; def: ZomeDef }> {\n  const dnaHash = serializeHash(cellId[0]);\n\n  const template = await compositoryService.getTemplateForDna(dnaHash);\n\n  const zomeDefHash = template.dnaTemplate.zome_defs[zomeIndex].zome_def_hash;\n\n  // Fetch the appropriate elements bundle for this zome\n  const zomeDef = await compositoryService.getZomeDef(zomeDefHash);\n\n  if (!zomeDef.components_bundle_file)\n    throw new Error('This zome does not have any elements bundle file');\n\n  const file = await compositoryService.downloadFile(\n    zomeDef.components_bundle_file\n  );\n\n  const module = await importModuleFromFile(file);\n  const renderers = await (module.default as SetupRenderers)(\n    compositoryService.appWebsocket,\n    cellId\n  );\n  return {\n    renderers,\n    def: zomeDef,\n  };\n}\n"]}