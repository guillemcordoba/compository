{"version":3,"file":"fetch-renderers.js","sourceRoot":"","sources":["../../src/processes/fetch-renderers.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAS3D,OAAO,EAAE,oBAAoB,EAAE,MAAM,2BAA2B,CAAC;AAEjE,MAAM,CAAC,KAAK,UAAU,qBAAqB,CACzC,kBAAsC,EACtC,MAAc,EACd,SAAiB;IAEjB,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAEzC,MAAM,QAAQ,GAAG,MAAM,kBAAkB,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAErE,MAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC;IAC5E,OAAO,6BAA6B,CAAC,kBAAkB,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;AAChF,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,yBAAyB,CAC7C,kBAAsC,EACtC,MAAc;IAEd,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAEzC,MAAM,QAAQ,GAAG,MAAM,kBAAkB,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAErE,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAC7D,6BAA6B,CAC3B,kBAAkB,EAClB,MAAM,EACN,QAAQ,CAAC,aAAa,CACvB,CACF,CAAC;IACF,OAAO,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACrC,CAAC;AAED,KAAK,UAAU,6BAA6B,CAC1C,kBAAsC,EACtC,MAAc,EACd,WAAmB;IAEnB,sDAAsD;IACtD,MAAM,OAAO,GAAG,MAAM,kBAAkB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IAEjE,IAAI,CAAC,OAAO,CAAC,sBAAsB;QACjC,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;IAEtE,MAAM,IAAI,GAAG,MAAM,kBAAkB,CAAC,YAAY,CAChD,OAAO,CAAC,sBAAsB,CAC/B,CAAC;IAEF,MAAM,MAAM,GAAG,MAAM,oBAAoB,CAAC,IAAI,CAAC,CAAC;IAChD,MAAM,SAAS,GAAG,MAAO,MAAM,CAAC,OAA0B,CACxD,kBAAkB,CAAC,YAAY,EAC/B,MAAM,CACP,CAAC;IACF,OAAO;QACL,SAAS;QACT,GAAG,EAAE,OAAO;KACb,CAAC;AACJ,CAAC","sourcesContent":["import { serializeHash } from '@holochain-open-dev/common';\nimport { CellId } from '@holochain/conductor-api';\nimport { CompositoryService } from '../services/compository-service';\nimport { ZomeDef } from '../types/dnas';\nimport {\n  ScopedRenderers,\n  SetupRenderers,\n  ZomeRenderers,\n} from '../types/scoped-renderers';\nimport { importModuleFromFile } from './import-module-from-file';\n\nexport async function fetchRenderersForZome(\n  compositoryService: CompositoryService,\n  cellId: CellId,\n  zomeIndex: number\n): Promise<ZomeRenderers> {\n  const dnaHash = serializeHash(cellId[0]);\n\n  const template = await compositoryService.getTemplateForDna(dnaHash);\n\n  const zomeDefHash = template.dnaTemplate.zome_defs[zomeIndex].zome_def_hash;\n  return internalFetchRenderersForZome(compositoryService, cellId, zomeDefHash);\n}\n\nexport async function fetchRenderersForAllZomes(\n  compositoryService: CompositoryService,\n  cellId: CellId\n): Promise<Array<ZomeRenderers>> {\n  const dnaHash = serializeHash(cellId[0]);\n\n  const template = await compositoryService.getTemplateForDna(dnaHash);\n\n  const promises = template.dnaTemplate.zome_defs.map(zome_def =>\n    internalFetchRenderersForZome(\n      compositoryService,\n      cellId,\n      zome_def.zome_def_hash\n    )\n  );\n  return await Promise.all(promises);\n}\n\nasync function internalFetchRenderersForZome(\n  compositoryService: CompositoryService,\n  cellId: CellId,\n  zomeDefHash: string\n): Promise<ZomeRenderers> {\n  // Fetch the appropriate elements bundle for this zome\n  const zomeDef = await compositoryService.getZomeDef(zomeDefHash);\n\n  if (!zomeDef.components_bundle_file)\n    throw new Error('This zome does not have any elements bundle file');\n\n  const file = await compositoryService.downloadFile(\n    zomeDef.components_bundle_file\n  );\n\n  const module = await importModuleFromFile(file);\n  const renderers = await (module.default as SetupRenderers)(\n    compositoryService.appWebsocket,\n    cellId\n  );\n  return {\n    renderers,\n    def: zomeDef,\n  };\n}\n"]}