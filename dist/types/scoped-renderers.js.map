{"version":3,"file":"scoped-renderers.js","sourceRoot":"","sources":["../../src/types/scoped-renderers.ts"],"names":[],"mappings":"","sourcesContent":["import { AppWebsocket, CellId } from '@holochain/conductor-api';\nimport { ScopedElementsHost } from '@open-wc/scoped-elements/types/src/types';\nimport { LitElement } from 'lit-element';\nimport { ZomeDef } from './dnas';\n\nexport type Dictionary<T> = { [key: string]: T };\n\nexport interface ScopedRenderers {\n  standalone: Array<StandaloneRenderer>;\n  // Key is the entry id\n  entryRenderers: Dictionary<EntryRenderer>;\n  entryAttachments: Array<AttachmentRenderer>;\n}\n\nexport type SetupRenderers = (\n  appWebsocket: AppWebsocket,\n  cellId: CellId\n) => Promise<ScopedRenderers>;\n\nexport interface Renderer {\n  name: string;\n}\nexport interface StandaloneRenderer extends Renderer {\n  render: (registry: CustomElementRegistry, root: ShadowRoot) => void;\n}\n\nexport interface EntryRenderer extends Renderer {\n  render: (\n    registry: CustomElementRegistry,\n    root: ShadowRoot,\n    entryHash: string\n  ) => void;\n}\n\nexport interface AttachmentRenderer extends Renderer {\n  render: (\n    registry: CustomElementRegistry,\n    root: ShadowRoot,\n    entryHash: string\n  ) => void;\n}\n\nexport type ScopeHost = LitElement & ScopedElementsHost;\n\nexport interface ZomeRenderers {\n  renderers: ScopedRenderers;\n  def: ZomeDef;\n}\n"]}